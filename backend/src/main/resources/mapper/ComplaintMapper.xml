<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.taxi.mapper.ComplaintMapper">

    <resultMap id="BaseResultMap" type="com.taxi.entity.Complaint">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="order_id" property="orderId" jdbcType="BIGINT"/>
        <result column="complainant_id" property="complainantId" jdbcType="BIGINT"/>
        <result column="defendant_id" property="defendantId" jdbcType="BIGINT"/>
        <result column="complaint_type" property="complaintType" jdbcType="VARCHAR"/>
        <result column="title" property="title" jdbcType="VARCHAR"/>
        <result column="description" property="description" jdbcType="LONGVARCHAR"/>
        <result column="evidence_files" property="evidenceFiles" jdbcType="VARCHAR" 
                typeHandler="com.taxi.handler.JsonListTypeHandler"/>
        <result column="status" property="status" jdbcType="VARCHAR"/>
        <result column="admin_id" property="adminId" jdbcType="BIGINT"/>
        <result column="resolution" property="resolution" jdbcType="LONGVARCHAR"/>
        <result column="refund_amount" property="refundAmount" jdbcType="DECIMAL"/>
        <result column="resolution_time" property="resolutionTime" jdbcType="TIMESTAMP"/>
        <result column="created_at" property="createdAt" jdbcType="TIMESTAMP"/>
        <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="Base_Column_List">
        id, order_id, complainant_id, defendant_id, complaint_type, title, description,
        evidence_files, status, admin_id, resolution, refund_amount, resolution_time, created_at, updated_at
    </sql>

    <select id="selectById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM complaints
        WHERE id = #{id}
    </select>

    <insert id="insert" parameterType="com.taxi.entity.Complaint" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO complaints (
            order_id, complainant_id, defendant_id, complaint_type, title, description,
            evidence_files, status, created_at, updated_at
        ) VALUES (
            #{orderId}, #{complainantId}, #{defendantId}, #{complaintType}, #{title}, #{description},
            #{evidenceFiles, typeHandler=com.taxi.handler.JsonListTypeHandler}, #{status}, 
            #{createdAt}, #{updatedAt}
        )
    </insert>

    <update id="updateById" parameterType="com.taxi.entity.Complaint">
        UPDATE complaints
        SET order_id = #{orderId},
            complainant_id = #{complainantId},
            defendant_id = #{defendantId},
            complaint_type = #{complaintType},
            title = #{title},
            description = #{description},
            evidence_files = #{evidenceFiles, typeHandler=com.taxi.handler.JsonListTypeHandler},
            status = #{status},
            admin_id = #{adminId},
            resolution = #{resolution},
            refund_amount = #{refundAmount},
            resolution_time = #{resolutionTime},
            updated_at = #{updatedAt}
        WHERE id = #{id}
    </update>

    <delete id="deleteById" parameterType="java.lang.Long">
        DELETE FROM complaints WHERE id = #{id}
    </delete>

    <select id="selectAllWithDetails" resultType="map">
        SELECT 
            c.*,
            cu.real_name as complainantName,
            cu.phone as complainantPhone,
            du.real_name as defendantName,
            du.phone as defendantPhone,
            au.real_name as adminName,
            o.order_number as orderNumber,
            o.pickup_address,
            o.destination_address,
            o.actual_fare
        FROM complaints c
        LEFT JOIN users cu ON c.complainant_id = cu.id
        LEFT JOIN users du ON c.defendant_id = du.id
        LEFT JOIN users au ON c.admin_id = au.id
        LEFT JOIN orders o ON c.order_id = o.id
        <where>
            <if test="status != null and status != ''">
                AND c.status = #{status}
            </if>
            <if test="complaintType != null and complaintType != ''">
                AND c.complaint_type = #{complaintType}
            </if>
        </where>
        ORDER BY c.created_at DESC
        LIMIT #{size} OFFSET #{offset}
    </select>

    <select id="countAll" resultType="int">
        SELECT COUNT(*)
        FROM complaints c
        <where>
            <if test="status != null and status != ''">
                AND c.status = #{status}
            </if>
            <if test="complaintType != null and complaintType != ''">
                AND c.complaint_type = #{complaintType}
            </if>
        </where>
    </select>

    <select id="selectByComplainantId" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM complaints
        WHERE complainant_id = #{complainantId}
        ORDER BY created_at DESC
        LIMIT #{size} OFFSET #{offset}
    </select>

    <select id="selectByDefendantId" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM complaints
        WHERE defendant_id = #{defendantId}
        ORDER BY created_at DESC
        LIMIT #{size} OFFSET #{offset}
    </select>

    <select id="selectByOrderId" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM complaints
        WHERE order_id = #{orderId}
        ORDER BY created_at DESC
    </select>

    <select id="selectByStatus" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM complaints
        WHERE status = #{status}
        ORDER BY created_at DESC
        LIMIT #{size} OFFSET #{offset}
    </select>

    <select id="selectComplaintWithDetails" resultType="map">
        SELECT 
            c.*,
            cu.real_name as complainantName,
            cu.phone as complainantPhone,
            cu.avatar as complainantAvatar,
            du.real_name as defendantName,
            du.phone as defendantPhone,
            du.avatar as defendantAvatar,
            au.real_name as adminName,
            o.order_number as orderNumber,
            o.pickup_address,
            o.destination_address,
            o.actual_fare,
            o.estimated_fare,
            o.created_at as orderCreatedAt,
            o.completion_time as orderCompletionTime
        FROM complaints c
        LEFT JOIN users cu ON c.complainant_id = cu.id
        LEFT JOIN users du ON c.defendant_id = du.id
        LEFT JOIN users au ON c.admin_id = au.id
        LEFT JOIN orders o ON c.order_id = o.id
        WHERE c.id = #{id}
    </select>

    <select id="selectComplaintStats" resultType="map">
        SELECT 
            COUNT(*) as totalComplaints,
            COUNT(CASE WHEN status = 'PENDING' THEN 1 END) as pendingCount,
            COUNT(CASE WHEN status = 'INVESTIGATING' THEN 1 END) as investigatingCount,
            COUNT(CASE WHEN status = 'RESOLVED' THEN 1 END) as resolvedCount,
            COUNT(CASE WHEN status = 'CLOSED' THEN 1 END) as closedCount,
            COUNT(CASE WHEN complaint_type = 'SERVICE' THEN 1 END) as serviceComplaints,
            COUNT(CASE WHEN complaint_type = 'SAFETY' THEN 1 END) as safetyComplaints,
            COUNT(CASE WHEN complaint_type = 'PAYMENT' THEN 1 END) as paymentComplaints,
            COUNT(CASE WHEN complaint_type = 'BEHAVIOR' THEN 1 END) as behaviorComplaints,
            COUNT(CASE WHEN complaint_type = 'OTHER' THEN 1 END) as otherComplaints
        FROM complaints
    </select>

</mapper>