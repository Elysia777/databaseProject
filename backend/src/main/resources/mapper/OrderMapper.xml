<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.taxi.mapper.OrderMapper">

    <resultMap id="BaseResultMap" type="com.taxi.entity.Order">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="order_number" property="orderNumber" jdbcType="VARCHAR"/>
        <result column="passenger_id" property="passengerId" jdbcType="BIGINT"/>
        <result column="driver_id" property="driverId" jdbcType="BIGINT"/>
        <result column="vehicle_id" property="vehicleId" jdbcType="BIGINT"/>
        <result column="order_type" property="orderType" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="VARCHAR"/>
        <result column="pickup_address" property="pickupAddress" jdbcType="VARCHAR"/>
        <result column="pickup_latitude" property="pickupLatitude" jdbcType="DECIMAL"/>
        <result column="pickup_longitude" property="pickupLongitude" jdbcType="DECIMAL"/>
        <result column="destination_address" property="destinationAddress" jdbcType="VARCHAR"/>
        <result column="destination_latitude" property="destinationLatitude" jdbcType="DECIMAL"/>
        <result column="destination_longitude" property="destinationLongitude" jdbcType="DECIMAL"/>
        <!-- 这些字段在实体类中不存在，但在数据库中存在，可以为NULL -->
        <result column="estimated_distance" property="estimatedDistance" jdbcType="DECIMAL"/>
        <result column="estimated_duration" property="estimatedDuration" jdbcType="INTEGER"/>
        <result column="estimated_fare" property="estimatedFare" jdbcType="DECIMAL"/>
        <result column="actual_distance" property="actualDistance" jdbcType="DECIMAL"/>
        <result column="actual_duration" property="actualDuration" jdbcType="INTEGER"/>
        <result column="actual_fare" property="actualFare" jdbcType="DECIMAL"/>
        <result column="service_fee" property="serviceFee" jdbcType="DECIMAL"/>
        <result column="total_fare" property="totalFare" jdbcType="DECIMAL"/>
        <result column="payment_method" property="paymentMethod" jdbcType="VARCHAR"/>
        <result column="payment_status" property="paymentStatus" jdbcType="VARCHAR"/>
        <result column="scheduled_time" property="scheduledTime" jdbcType="TIMESTAMP"/>
        <result column="pickup_time" property="pickupTime" jdbcType="TIMESTAMP"/>
        <result column="completion_time" property="completionTime" jdbcType="TIMESTAMP"/>
        <result column="cancel_reason" property="cancelReason" jdbcType="VARCHAR"/>
        <result column="created_at" property="createdAt" jdbcType="TIMESTAMP"/>
        <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="Base_Column_List">
        id, order_number, passenger_id, driver_id, vehicle_id, order_type, status,
        pickup_address, pickup_latitude, pickup_longitude, destination_address, destination_latitude, destination_longitude,
        estimated_distance, estimated_duration, estimated_fare, actual_distance, actual_duration, actual_fare,
        service_fee, total_fare, payment_method, payment_status, scheduled_time, pickup_time, completion_time,
        cancel_reason, created_at, updated_at
    </sql>

    <select id="selectById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM orders
        WHERE id = #{id}
    </select>

    <select id="selectByOrderNumber" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM orders
        WHERE order_number = #{orderNumber}
    </select>

    <select id="selectByPassengerId" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM orders
        WHERE passenger_id = #{passengerId}
        ORDER BY created_at DESC
    </select>

    <select id="selectByDriverId" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM orders
        WHERE driver_id = #{driverId}
        ORDER BY created_at DESC
    </select>

    <insert id="insert" parameterType="com.taxi.entity.Order" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO orders (
            order_number, passenger_id, driver_id, vehicle_id, order_type, status,
            pickup_address, pickup_latitude, pickup_longitude, destination_address, destination_latitude, destination_longitude,
            estimated_distance, estimated_duration, estimated_fare, actual_distance, actual_duration, actual_fare,
            service_fee, total_fare, payment_method, payment_status, scheduled_time, pickup_time, completion_time,
            cancel_reason, created_at, updated_at
        ) VALUES (
            #{orderNumber}, #{passengerId}, #{driverId}, #{vehicleId}, #{orderType}, #{status},
            #{pickupAddress}, #{pickupLatitude}, #{pickupLongitude}, #{destinationAddress}, #{destinationLatitude}, #{destinationLongitude},
            #{estimatedDistance}, #{estimatedDuration}, #{estimatedFare}, #{actualDistance}, #{actualDuration}, #{actualFare},
            #{serviceFee}, #{totalFare}, #{paymentMethod}, #{paymentStatus}, #{scheduledTime}, #{pickupTime}, #{completionTime},
            #{cancelReason}, #{createdAt}, #{updatedAt}
        )
    </insert>

    <update id="updateById" parameterType="com.taxi.entity.Order">
        UPDATE orders
        SET order_number = #{orderNumber},
            passenger_id = #{passengerId},
            driver_id = #{driverId},
            vehicle_id = #{vehicleId},
            order_type = #{orderType},
            status = #{status},
            pickup_address = #{pickupAddress},
            pickup_latitude = #{pickupLatitude},
            pickup_longitude = #{pickupLongitude},
            destination_address = #{destinationAddress},
            destination_latitude = #{destinationLatitude},
            destination_longitude = #{destinationLongitude},
            estimated_distance = #{estimatedDistance},
            estimated_duration = #{estimatedDuration},
            estimated_fare = #{estimatedFare},
            actual_distance = #{actualDistance},
            actual_duration = #{actualDuration},
            actual_fare = #{actualFare},
            service_fee = #{serviceFee},
            total_fare = #{totalFare},
            payment_method = #{paymentMethod},
            payment_status = #{paymentStatus},
            scheduled_time = #{scheduledTime},
            pickup_time = #{pickupTime},
            completion_time = #{completionTime},
            cancel_reason = #{cancelReason},
            updated_at = #{updatedAt}
        WHERE id = #{id}
    </update>

    <delete id="deleteById" parameterType="java.lang.Long">
        DELETE FROM orders WHERE id = #{id}
    </delete>

    <!-- 查询司机的历史订单 -->
    <select id="selectDriverOrders" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM orders
        WHERE driver_id = #{driverId}
        ORDER BY created_at DESC
        LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 按状态查询司机的订单 -->
    <select id="selectDriverOrdersByStatus" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM orders
        WHERE driver_id = #{driverId} AND status = #{status}
        ORDER BY created_at DESC
        LIMIT #{size} OFFSET #{offset}
    </select>

    <select id="selectAll" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM orders
        ORDER BY created_at DESC
    </select>

    <select id="selectByStatus" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM orders
        WHERE status = #{status}
        ORDER BY created_at DESC
    </select>

    <select id="selectCurrentOrderByDriverId" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM orders
        WHERE driver_id = #{driverId}
        AND status IN ('ASSIGNED', 'PICKUP', 'IN_PROGRESS')
        ORDER BY created_at DESC
        LIMIT 1
    </select>

    <select id="selectCurrentOrderByPassengerId" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM orders
        WHERE passenger_id = #{passengerId}
        AND status IN ('SCHEDULED', 'PENDING', 'ASSIGNED', 'PICKUP', 'IN_PROGRESS')
        ORDER BY created_at DESC
        LIMIT 1
    </select>

    <select id="selectPendingScheduledOrders" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM orders
        WHERE order_type = 'RESERVATION'
        AND status = 'SCHEDULED'
        AND scheduled_time IS NOT NULL
        ORDER BY scheduled_time ASC
    </select>

    <select id="selectScheduledOrdersByPassengerId" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM orders
        WHERE passenger_id = #{passengerId}
        AND order_type = 'RESERVATION'
        ORDER BY created_at DESC
    </select>

    <select id="selectAvailableScheduledOrders" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM orders
        WHERE order_type = 'RESERVATION'
        AND status = 'PENDING'
        AND scheduled_time BETWEEN #{startTime} AND #{endTime}
        ORDER BY scheduled_time ASC
    </select>

    <select id="selectActivatedScheduledOrders" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM orders
        WHERE order_type = 'RESERVATION'
        AND status = 'PENDING'
        AND scheduled_time BETWEEN #{startTime} AND #{endTime}
        ORDER BY scheduled_time ASC
    </select>

    <!-- 统计司机订单数量 -->
    <select id="countDriverOrders" resultType="int">
        SELECT COUNT(*)
        FROM orders
        WHERE driver_id = #{driverId}
        <if test="status != null and status != ''">
            AND status = #{status}
        </if>
    </select>

    <!-- 获取司机月度收入汇总 -->
    <select id="selectDriverMonthlySummary" resultType="map">
        SELECT 
            COALESCE(SUM(total_fare), 0) as totalEarnings,
            COUNT(*) as totalOrders,
            COALESCE(AVG(total_fare), 0) as averageEarnings,
            COALESCE(SUM(actual_distance), 0) as totalDistance
        FROM orders
        WHERE driver_id = #{driverId}
        AND status = 'COMPLETED'
        AND DATE_FORMAT(completion_time, '%Y-%m') = #{month}
    </select>

    <!-- 获取司机收入汇总统计 -->
    <select id="selectDriverEarningsSummary" resultType="map">
        SELECT 
            COALESCE(SUM(total_fare), 0) as totalEarnings,
            COUNT(*) as totalOrders,
            COALESCE(AVG(total_fare), 0) as averageEarnings,
            COALESCE(SUM(actual_distance), 0) as totalDistance
        FROM orders
        WHERE driver_id = #{driverId}
        AND status = 'COMPLETED'
        AND DATE_FORMAT(completion_time, '%Y-%m') = #{month}
    </select>

    <!-- 获取司机每日收入记录 -->
    <select id="selectDriverDailyEarnings" resultType="map">
        SELECT 
            DATE(completion_time) as date,
            COUNT(*) as orderCount,
            COALESCE(SUM(actual_distance), 0) as totalDistance,
            COALESCE(SUM(total_fare), 0) as totalEarnings,
            COALESCE(AVG(total_fare), 0) as averageEarnings
        FROM orders
        WHERE driver_id = #{driverId}
        AND status = 'COMPLETED'
        AND DATE_FORMAT(completion_time, '%Y-%m') = #{month}
        GROUP BY DATE(completion_time)
        ORDER BY DATE(completion_time) DESC
        LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 统计司机每日收入记录数量 -->
    <select id="countDriverDailyEarnings" resultType="int">
        SELECT COUNT(DISTINCT DATE(completion_time))
        FROM orders
        WHERE driver_id = #{driverId}
        AND status = 'COMPLETED'
        AND DATE_FORMAT(completion_time, '%Y-%m') = #{month}
    </select>

    <!-- 获取司机每日收入图表数据 -->
    <select id="selectDriverDailyEarningsChart" resultType="map">
        SELECT 
            DATE_FORMAT(completion_time, '%m-%d') as date,
            COALESCE(SUM(total_fare), 0) as earnings,
            COUNT(*) as orderCount
        FROM orders
        WHERE driver_id = #{driverId}
        AND status = 'COMPLETED'
        AND DATE_FORMAT(completion_time, '%Y-%m') = #{month}
        GROUP BY DATE(completion_time)
        ORDER BY DATE(completion_time) ASC
    </select>

    <!-- 获取司机每周收入图表数据 -->
    <select id="selectDriverWeeklyEarnings" resultType="map">
        SELECT 
            CONCAT('第', WEEK(completion_time, 1) - WEEK(DATE_SUB(completion_time, INTERVAL DAYOFMONTH(completion_time) - 1 DAY), 1) + 1, '周') as date,
            COALESCE(SUM(total_fare), 0) as earnings,
            COUNT(*) as orderCount
        FROM orders
        WHERE driver_id = #{driverId}
        AND status = 'COMPLETED'
        AND DATE_FORMAT(completion_time, '%Y-%m') = #{month}
        GROUP BY WEEK(completion_time, 1)
        ORDER BY WEEK(completion_time, 1) ASC
    </select>

    <!-- 查询订单详情（包含司机车辆信息） -->
    <select id="selectOrderWithDriverVehicle" resultType="map">
        SELECT 
            o.*,
            u.real_name as driverName,
            u.phone as driverPhone,
            v.plate_number as vehiclePlateNumber,
            v.brand as vehicleBrand,
            v.model as vehicleModel,
            v.color as vehicleColor,
            v.seats as vehicleSeats
        FROM orders o
        LEFT JOIN drivers d ON o.driver_id = d.id
        LEFT JOIN users u ON d.user_id = u.id
        LEFT JOIN vehicles v ON d.id = v.driver_id AND v.is_active = TRUE
        WHERE o.id = #{orderId}
    </select>

    <!-- 查询所有订单（包含乘客和司机姓名） -->
    <select id="selectAllWithUserNames" resultType="map">
        SELECT 
            o.*,
            pu.id as passengerUserId,
            pu.real_name as passengerName,
            pu.phone as passengerPhone,
            du.id as driverUserId,
            du.real_name as driverName,
            du.phone as driverPhone
        FROM orders o
        LEFT JOIN passengers p ON o.passenger_id = p.id
        LEFT JOIN users pu ON p.user_id = pu.id
        LEFT JOIN drivers d ON o.driver_id = d.id
        LEFT JOIN users du ON d.user_id = du.id
        ORDER BY o.created_at DESC
    </select>

</mapper> 